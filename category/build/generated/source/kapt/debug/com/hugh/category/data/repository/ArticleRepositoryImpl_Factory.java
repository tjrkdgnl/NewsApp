// Generated by Dagger (https://dagger.dev).
package com.hugh.category.data.repository;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ArticleRepositoryImpl_Factory implements Factory<ArticleRepositoryImpl> {
  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  public ArticleRepositoryImpl_Factory(Provider<CoroutineDispatcher> ioDispatcherProvider,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    this.ioDispatcherProvider = ioDispatcherProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public ArticleRepositoryImpl get() {
    return newInstance(ioDispatcherProvider.get(), remoteDataSourceProvider.get());
  }

  public static ArticleRepositoryImpl_Factory create(
      Provider<CoroutineDispatcher> ioDispatcherProvider,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    return new ArticleRepositoryImpl_Factory(ioDispatcherProvider, remoteDataSourceProvider);
  }

  public static ArticleRepositoryImpl newInstance(CoroutineDispatcher ioDispatcher,
      RemoteDataSource remoteDataSource) {
    return new ArticleRepositoryImpl(ioDispatcher, remoteDataSource);
  }
}

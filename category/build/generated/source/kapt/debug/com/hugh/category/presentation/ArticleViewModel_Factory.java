// Generated by Dagger (https://dagger.dev).
package com.hugh.category.presentation;

import com.hugh.category.domain.usecase.ArticleUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ArticleViewModel_Factory implements Factory<ArticleViewModel> {
  private final Provider<ArticleUseCase> articleUseCaseProvider;

  public ArticleViewModel_Factory(Provider<ArticleUseCase> articleUseCaseProvider) {
    this.articleUseCaseProvider = articleUseCaseProvider;
  }

  @Override
  public ArticleViewModel get() {
    return newInstance(articleUseCaseProvider.get());
  }

  public static ArticleViewModel_Factory create(Provider<ArticleUseCase> articleUseCaseProvider) {
    return new ArticleViewModel_Factory(articleUseCaseProvider);
  }

  public static ArticleViewModel newInstance(ArticleUseCase articleUseCase) {
    return new ArticleViewModel(articleUseCase);
  }
}
